import tensorflow as tf 
from tensorflow.keras.models import Sequential 
from tensorflow.keras.layers import Conv2D, MaxPooling2D, Flatten, Dense, Dropout 
from tensorflow.keras.utils import to_categorical 
from tensorflow.keras.datasets import mnist 
import matplotlib.pyplot as plt 
import numpy as np 
(x_train, y_train), (x_test, y_test) = mnist.load_data() 
x_train = x_train.reshape(-1, 28, 28, 1).astype('float32') / 255.0 
x_test = x_test.reshape(-1, 28, 28, 1).astype('float32') / 255.0 
 
y_train_cat = to_categorical(y_train, num_classes=10) 
y_test_cat = to_categorical(y_test, num_classes=10) 
model = Sequential([ 
    Conv2D(32, kernel_size=(3, 3), activation='relu', input_shape=(28, 28, 1)), 
    MaxPooling2D(pool_size=(2, 2)),  
    Conv2D(64, kernel_size=(3, 3), activation='relu'), 
    MaxPooling2D(pool_size=(2, 2)), 
    Flatten(), 
    Dense(128, activation='relu'), 
    Dropout(0.5), 
    Dense(10, activation='softmax') 
]) 
model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy']) 
model.fit(x_train, y_train_cat, batch_size=128, epochs=5, validation_split=0.1) 
test_loss, test_acc = model.evaluate(x_test, y_test_cat) 
print(f"Test Accuracy: {test_acc * 100:.2f}%") 
predictions = model.predict(x_test[:5]) 
 
for i in range(5): 
    plt.imshow(x_test[i].reshape(28,28), cmap='gray') 
    plt.title(f"Predicted: {np.argmax(predictions[i])} | Actual: {y_test[i]}") 
    plt.show()
